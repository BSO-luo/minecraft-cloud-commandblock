"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
function randomId(length = 8) {
    let output = '';
    for (let index = length; index > 0; --index) {
        output += chars[Math.floor(Math.random() * 62)];
    }
    return output;
}
exports.randomId = randomId;
/**
 * random operations
 */
class Random {
    constructor(value = Math.random()) {
        this.value = value;
    }
    bool(probability) {
        if (probability >= 1)
            return true;
        if (probability <= 0)
            return false;
        return this.value < probability;
    }
    real(...args) {
        const start = args.length > 1 ? args[0] : 0;
        const end = args[args.length - 1];
        return this.value * (end - start) + start;
    }
    int(...args) {
        return Math.floor(this.real(...args));
    }
    pick(source) {
        return source[Math.floor(this.value * source.length)];
    }
    splice(source) {
        return source.splice(Math.floor(this.value * source.length), 1)[0];
    }
    multiPick(source, count) {
        source = source.slice();
        const result = [];
        const length = Math.min(source.length, count);
        for (let i = 0; i < length; i += 1) {
            const index = Math.floor(this.value * source.length);
            const [item] = source.splice(index, 1);
            result.push(item);
        }
        return result;
    }
    weightedPick(weights) {
        const total = Object.entries(weights).reduce((prev, [_, curr]) => prev + curr, 0);
        const pointer = this.value * total;
        let counter = 0;
        for (const key in weights) {
            counter += weights[key];
            if (pointer < counter)
                return key;
        }
    }
}
exports.Random = Random;
function randomReal(...args) {
    return new Random().real(...args);
}
exports.randomReal = randomReal;
function randomInt(...args) {
    return new Random().int(...args);
}
exports.randomInt = randomInt;
function randomPick(source) {
    return new Random().pick(source);
}
exports.randomPick = randomPick;
function randomSplice(source) {
    return new Random().splice(source);
}
exports.randomSplice = randomSplice;
function randomMultiPick(source, count) {
    return new Random().multiPick(source, count);
}
exports.randomMultiPick = randomMultiPick;
function randomWeightedPick(weights) {
    return new Random().weightedPick(weights);
}
exports.randomWeightedPick = randomWeightedPick;
function randomBool(probability) {
    return new Random().bool(probability);
}
exports.randomBool = randomBool;
//# sourceMappingURL=random.js.map