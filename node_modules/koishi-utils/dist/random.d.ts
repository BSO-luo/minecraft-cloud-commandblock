export declare function randomId(length?: number): string;
/**
 * random operations
 */
export declare class Random {
    private value;
    constructor(value?: number);
    bool(probability: number): boolean;
    /**
     * random real
     * @param start start number
     * @param end end number
     * @returns a random real in the interval [start, end)
     */
    real(end: number): number;
    real(start: number, end: number): number;
    /**
     * random integer
     * @param start start number
     * @param end end number
     * @returns a random integer in the interval [start, end)
     */
    int(end: number): number;
    int(start: number, end: number): number;
    pick<T>(source: readonly T[]): T;
    splice<T>(source: T[]): T;
    multiPick<T>(source: T[], count: number): T[];
    weightedPick<T extends string>(weights: Record<T, number>): T;
}
/**
 * random real
 * @param start start number
 * @param end end number
 * @returns a random real in the interval [start, end)
 */
export declare function randomReal(end: number): number;
export declare function randomReal(start: number, end: number): number;
/**
 * random integer
 * @param start start number
 * @param end end number
 * @returns a random integer in the interval [start, end)
 */
export declare function randomInt(end: number): number;
export declare function randomInt(start: number, end: number): number;
export declare function randomPick<T>(source: readonly T[]): T;
export declare function randomSplice<T>(source: T[]): T;
export declare function randomMultiPick<T>(source: T[], count: number): T[];
export declare function randomWeightedPick<T extends string>(weights: Record<T, number>): T;
export declare function randomBool(probability: number): boolean;
